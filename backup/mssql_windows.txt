Setup differential & full backup MS SQL DB

cmd 

# testing share smb connect
net use \\%network_patch%\%mssql_servername%\ smb_pass /user:smbuser


mssql

0. create creds

CREATE CREDENTIAL [smb_credential]
WITH IDENTITY = 'smbuser',
SECRET = 'smb_pass';


1. 


USE master;
GO
CREATE CREDENTIAL [BackupSMB] 
WITH IDENTITY = N'smbuser', 
     SECRET = N'smb_pass';
GO

2. 

EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE WITH OVERRIDE;
EXEC xp_cmdshell 'net use \\%network_patch%\%mssql_servername%\ smb_pass /user:smbuser;
GO

2.5

EXEC xp_cmdshell 'dir \\%network_patch%\%mssql_servername%\';

-- если возвращает список файлов, знчит шара настроена правильно

2.9 -- расширенные настройки xp_cmd, если они выклчюены 

EXEC sp_configure 'show advanced options', 1;
RECONFIGURE; -- расширенные параметры

EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;  -- включение компонента 

EXEC sp_configure 'xp_cmdshell';  -- проверка

EXEC sp_configure 'xp_cmdshell', 0;
RECONFIGURE;  -- выключить после настройки для безопасности



3. 

BACKUP DATABASE [master] 
TO DISK = N'\\%network_patch%\%mssql_servername%\master.bak'  -- this backup master DB
WITH FORMAT, 
     INIT, 
     SKIP, 
     CHECKSUM, 
     STATS = 10;
GO

4. T-SQL script for automated 

BACKUP DATABASE [master] 
TO DISK = N'\\%network_patch%\%mssql_servername%\master.bak'
WITH FORMAT, 
     INIT, 
     SKIP, 
     CHECKSUM, 
     STATS = 10;


5. rotate backup 30 days

EXEC xp_cmdshell 'forfiles /P \\%network_patch%\%mssql_servername%\ /D -30 /C "cmd /c del @path"';


-- Full script for automated


-- Задаём переменные для использования в скрипте
DECLARE @DayOfWeek INT = DATEPART(WEEKDAY, GETDATE()); -- Определяет текущий день недели (1 = Воскресенье, 7 = Суббота)
DECLARE @BackupType NVARCHAR(50);
DECLARE @DatabaseName NVARCHAR(255);
DECLARE @BackupPath NVARCHAR(500);
DECLARE @LogBackupPath NVARCHAR(500);
DECLARE @DatabaseFolder NVARCHAR(500);
DECLARE @LogicalLogFile NVARCHAR(255);

-- Папка для хранения резервных копий
DECLARE @BackupFolder NVARCHAR(500) = '\\%network_patch%\%mssql_servername%\';

-- Список баз данных для резервного копирования
DECLARE @Databases TABLE (DatabaseName NVARCHAR(255));
INSERT INTO @Databases (DatabaseName)
VALUES 
    ('Database1'), 
    ('Database2'), 
    ('Database3'), 
    ('Database4');
-- при перечислении через Insert Into нужно указывать базы в отдельных строках или передвать в виде списка строк. 
-- Лучше не использовать в скрипте исключение "кроме системных", плохо отрабатывает, часто ошибается, сложные скрипты. да муторно перечислять, но перечисления работают предсказуемо

-- Установка типа резервного копирования
IF @DayOfWeek = 5
    SET @BackupType = 'FULL';
ELSE
    SET @BackupType = 'DIFFERENTIAL';

-- Цикл по базам данных
DECLARE db_cursor CURSOR FOR SELECT DatabaseName FROM @Databases;
OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @DatabaseName;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Определяем папку для текущей базы данных
    SET @DatabaseFolder = CONCAT(@BackupFolder, @DatabaseName, '\');
    
    -- Создаём папку, если она не существует
    DECLARE @CreateFolderCommand NVARCHAR(500);
    SET @CreateFolderCommand = 'mkdir "' + @DatabaseFolder + '"';
    EXEC xp_cmdshell @CreateFolderCommand;

    -- Формируем путь к файлу резервной копии базы данных
    SET @BackupPath = CONCAT(@DatabaseFolder, @DatabaseName, '_', @BackupType, '_', FORMAT(GETDATE(), 'yyyyMMdd_HHmmss'), '.bak');

    -- Выполняем резервное копирование базы данных
    IF @BackupType = 'FULL'
    BEGIN
        PRINT CONCAT('Создаётся полная копия для базы: ', @DatabaseName);
        EXEC('BACKUP DATABASE [' + @DatabaseName + '] TO DISK = N''' + @BackupPath + ''' WITH FORMAT, INIT, SKIP, CHECKSUM, STATS = 10');

        -- Формируем путь к файлу резервной копии журнала транзакций
        SET @LogBackupPath = CONCAT(@DatabaseFolder, @DatabaseName, '_LOG_', FORMAT(GETDATE(), 'yyyyMMdd_HHmmss'), '.trn');

        -- Выполняем резервное копирование журнала транзакций
        PRINT CONCAT('Создаётся резервная копия журнала для базы: ', @DatabaseName);
        EXEC('BACKUP LOG [' + @DatabaseName + '] TO DISK = N''' + @LogBackupPath + ''' WITH INIT, SKIP, CHECKSUM, STATS = 10');

        -- Переключение в режим SIMPLE
        PRINT CONCAT('Переключение базы данных "', @DatabaseName, '" в режим восстановления SIMPLE.');
        EXEC('ALTER DATABASE [' + @DatabaseName + '] SET RECOVERY SIMPLE');

        -- Получаем логическое имя файла журнала
        SELECT TOP 1 @LogicalLogFile = name
        FROM sys.master_files
        WHERE database_id = DB_ID(@DatabaseName) AND type_desc = 'LOG';

        IF @LogicalLogFile IS NOT NULL
        BEGIN
            -- Сжимаем файл журнала транзакций в режиме SIMPLE
            BEGIN TRY
                PRINT CONCAT('Сжатие файла журнала транзакций для базы данных "', @DatabaseName, '".');
                EXEC('USE [' + @DatabaseName + ']; DBCC SHRINKFILE (N''' + @LogicalLogFile + ''', TRUNCATEONLY)');
                PRINT CONCAT('Файл журнала для базы данных "', @DatabaseName, '" успешно сжат.');
            END TRY
            BEGIN CATCH
                PRINT CONCAT('Не удалось сжать файл журнала для базы данных "', @DatabaseName, '": ', ERROR_MESSAGE());
            END CATCH;
        END
        ELSE
        BEGIN
            PRINT CONCAT('Файл журнала для базы данных "', @DatabaseName, '" не найден или не существует.');
        END

        -- Возвращение в режим FULL
        PRINT CONCAT('Возвращение базы данных "', @DatabaseName, '" в режим восстановления FULL.');
        EXEC('ALTER DATABASE [' + @DatabaseName + '] SET RECOVERY FULL');
    END
    ELSE
    BEGIN
        PRINT CONCAT('Создаётся дифференциальная копия для базы: ', @DatabaseName);
        EXEC('BACKUP DATABASE [' + @DatabaseName + '] TO DISK = N''' + @BackupPath + ''' WITH DIFFERENTIAL, INIT, SKIP, CHECKSUM, STATS = 10');
    END

    -- Переход к следующей базе данных
    FETCH NEXT FROM db_cursor INTO @DatabaseName;
END;

-- Закрываем курсор
CLOSE db_cursor;
DEALLOCATE db_cursor;
